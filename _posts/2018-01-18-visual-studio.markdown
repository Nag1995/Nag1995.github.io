---
layout:     post
title:      "微软Visual Studio"
subtitle:   ""
date:       2018-01-18 22:23:00
author:     "EchoLeo"
header-img: "img/in-post/2018-01-18-visual-studio/vs.jpg"
tags:
    - VS
---

* auto-gen TOC:
{:toc}

# 微软Visual Studio

## 1. 生成配置

C/C++的预处理器、编译器和链接器都提供大量选项，用来控制代码生成的方式。这些选项通常由执行编译器的命令行设定。例如，使用微软编译单元的典型命令行如下：

`C:\> cl /c foo.cpp /Fo foo.obj /Wall /Od /Zi`

此命令行告诉编译器编译但不链接(/c)foo.cpp翻译单元，输出结果到foo.obj对象文件(/Fo foo.obj)，打开所有警告(/Wall)，关掉所有优化(/Od)并产生调试信息(/Zi)。

现代的编译器提供大量选项，每次生成时都重新指定这些选项，既不现实又易犯错，因此**生成配置**(build configuration)应运而生。生成配置是解决方案内个别项目的预处理器、编译器和链接器的选项集合。程序员可设置任意数量的生成配置，任意命名，并在每个生成配置中设定不同的预处理器、编译器和链接器选项。默认把同一组选项应用到项目中的每个翻译单元，但也可以在个别翻译单元上做特殊设置，以替代项目的全局设置。有些情况下，可以在源文件或头文件中使用#pragma指令去设置一段代码的编译选项。例如`#pragma optimize("", off)`可以关闭优化，方便调试某个翻译单元，甚至某个函数。

### 1.1 常用生成选项

#### 预处理设置
C++预处理器处理#include文件的展开，以及处理#define宏的定义和替换。所有现代的C++预处理器皆有一个极强大的功能，就是可以通过命令行定义预处理宏(因而也能通过生成配置定义)。用这种方式定义宏，何在代码中编写#define指令等效。多数编译器提供此功能的命令行选项-D或/D，此选项看出现多次。
此功能让生成选项和代码沟通，而不需要修改代码本身。举一个常见例子，在调试生成中必然会定义_DEBUG符号，而在发布生成中会定义NDEBUG符号取代之。源代码可以检查这些符号，去“了解”目前的生成调试或发布模式。这称为**条件编译**(conditional compilation)。例如：
~~~C++
void f()
{
#ifdefine _DEBUG
    Printf("Calling function f()\n");
#endif
    //……
}
~~~
编译器也可以基于其编译环境和目标平台的信息，自由地加入预处理宏到代码中。例如，当编译一个C++文件时，大多数编译器会定义__cplusplus宏，从而能编写代码自动地适应C和C++编译。

又例如，每个编译器都会通过一个“魔法”宏，让代码识别编译器。当用微软的编译器编译代码时，编译器会定义_MSC_VER宏(_MSC_VER的值为微软编译器的版本号)：当时用GNU编译器(gcc)，则会定义__GNUC__宏，其他编译器也如是。与此相似，执行代码的目标平台也是用宏来定义的。例如，生成32位Windows机器的执行代码时，就会定义_WIN32符号。可以利用这些关键功能去编写跨平台代码，因为这些宏使代码“了解”目前被哪个编译器编译，并需要编译至哪个目标平台。

#### 编译器设置
控制编译器产生的对象文件是否包含调试信息，是最常见的编译选项之一。调试器使用此信息去逐步执行代码、显示变量的值等。调试信息会增大磁盘上的可执行文件大小，也会方便黑客做反向工程。因此，最终发布的可执行文件必会剔除这些调试信息。然而，在开发期间，调试信息是无价之宝，应该经常藏于生成代码中。
另外，可以控制编译器是否展开内联函数。如关掉内联函数展开，每个内联函数在内存中只有一份，有唯一的内存地址。这样设置，使用调试器去追踪代码就容易得多，但其明显的代价就是放弃了正常内联函数执行速度的提升。

内联函数展开是称为优化的泛代码转换例子之一。可以使用编译器选项去控制编译器尝试优化代码的进取性，以及使用哪些优化方法。优化可能会打乱代码里的语句次序，完全剔除一些变量，把变量移动到不同地方，或在函数里将CPU寄存器作为新用途重复使用。经优化的代码常会迷惑大多数调试器，令调试器以不同方式对用户“说谎”，并难以观察真是的执行情况。因此，在调试生成中，通常会关上优化选项。这样一来，每个变量、每行代码都会和原来编写的保持完全一致。但是，未经优化的代码，执行时较完全优化的代码慢许多。

#### 链接器设置
链接器也提供多个选项，例如，控制输出文件的类型(如可执行文件、DLL)，指定链接哪些外部库至可执行文件，以及指定搜索哪些程序库的路径。惯例之一，调试时，可执行文件连接调试用的库，发布版本则链接优化的库。

链接器选项也可控制堆栈大小、程序载入内存时的首选基址、代码在何平台上执行(以做平台相关的优化)，以及许多其它细节选项。


### 1.2 典型生成配置
· **调试(Debug)**：此版本关上各种优化，禁用所有函数内联，并且包含完整的调试信息。此生成版本是用来测试新代码，以及调试在开发过程中出现的几乎所有最不平凡的问题。

· **发布(Release)**：发布生成版本是较快的程序版本，但任然保留调试信息并开启断言。

· **制作(Production)**：制作配置，是为生成最终发行给消费者的游戏版本而设。此配置有时也称作“最终(Final)”或“光盘(Disk)”配置。制作配置与发布配置的差别，在于前者去除所有调试信息，通常关上所有断言，并完全启动优化。调试制作生成版本非常棘手，但制作生成版本是最快及最精干的生成类型。

· **工具(Tools)**：有些游戏工作室的工具和游戏本身会共用代码库。此方案中，加入“工具”配置很合理，用以为工具条件编译共用代码。工具配置一般会定义一个预处理宏(如TOOLS_BUILD)，以告知代码当前是站在生成工具用的版本。例如，某个工具可能需要一些C++类提供编辑用函数，而这些函数在游戏中并不需要。那么就可以用#ifdef TOOLS_BUILD … #endif指令包围这些函数。由于工具通常也要分调试和发布版本，所以开发者会建立两个工具生成，如命名为“ToolsDebug”及“ToolsRelease”

#### 混合生成版本
混合生成版本(hybrid build)是指其配置中，大部分翻译单元是发布模式，只有一小部分翻译单元为调试模式。使用这种配置，容易调试当前要监察的代码，而其余的代码能继续以全速运行。
基于文本的生成工具，如make，能很容易设置混合生成。用户能以翻译单元为单位把某些翻译单元设置为调试模式。大致做法是：定义一个make变量，如$HYBRID_SOURCE，列举所有要设置为调试模式的翻译单元(.cpp文件)；设置生成规则，编译所有翻译单元的调试及发布两个版本，并将每个对象文件(.obj/.o)按其版本分别输出到两个文件夹；设定最终的链接规则，链接$HYBRID_SOURCE列举的对象文件调试版本，以及其它对象文件的发布版本。

可惜，在Visual Studio中并不容易做到同样的事情。因为Visual Studio的生成配置是以项目为单位，而不是以翻译单元为单位的。然而，若源代码已经组织成库，就可以在结局方案层面上，设立“混合”生成配置。此配置可挑选所需项目，并为每个项目选择采用调试还是发布版本。

### 1.3 项目配置教程

#### 常规属性页

· **输出目录(Output Directory)**：决定生成的最终产品放于哪个目录之下。编译器/链接器最终输出可执行文件、库和DLL。

· **中间目录(Intermediate Directory)**：定义中间文件在生成时输出的目录。中间文件主要为对象文件。中间文件不需要包含在最终程序发行版里，而只是在生成可执行文件、库和DLL过程时所需。
Visual Studio提供宏功能，这些宏能用来在项目属性页中设置目录或其它属性。只要把宏的名字用括号包围并前置美元符(如$(ConfigurationName))便可使用。一些常用的宏列举如下。

    · $(TargetFilename)：项目生成的最终可执行文件、库或DLL的文件名
    · $(TargetPath)：最终可执行文件、库或DLL的绝对路径。
    · $(ConfigurationName)：生成的配置名称，典型的值为“Debug”或“Release”
    · $(OutDir)：输出目录设置的值
    · $(IntDir)：中间目录设置的值
    · $(VCInstallDir)：安装Visual C++的目录

要参见所有可用的宏，单击输出目录或中间目录属性有房的下拉箭头，选择编辑，在弹出的对话框中单击Macros。

#### 调试属性页

在调试属性页中，可指定要调试的可执行文件的名称及所在的位置。本页也可指定命令行参数，在运行时传递至程序。

#### C/C++属性页
· **常规/附加包含目录**：此属性列举当读取#include头文件时所搜寻的目录。最好使用相对路径或Visual Studio提供的宏的宏头去设置目录，如$(OutDir)、$(IntDir)。

· **常规/调试信息格式**：此属性控制是否产生调试信息以及调试信息的格式。一般来说，调试及发布配置都包含调试信息，方便在开发游戏时追查问题。最终制作生成应该出去所有调试信息。

· **预处理器/预处理器定义**：此属性可方便地列出任意数量的C/C++预处理符号，当编译源文件时这些符号会被定义。

#### 链接器属性页
· **常规/输出文件**：设置生成最终产品的文件名及所在目录。

· **常规/附加库目录**：当链接时要读取库或对象文件，就会搜寻此属性列出的目录

· **输入/附加依赖项**：此属性列出需要和可执行文件或DLL链接的外部库。

源代码中的特殊#program指令，可以来告诉链接器去自动链接某个库。因此，不能从附加依赖项看到所有实际上会链接的库。


## 2 调试代码
在Visual Studio中，可选择某行代码并按F9键切换断点。
当断点被命中，可按F10键单步执行代码。
按F11键能逐语句进入函数调用。

在Visual Studio监视窗口中可以使用后缀改变Visual Studio显示数据的方式，

· “,d”后缀强制把值以十进制显示。

· “,x”后缀强制把值以十六进制显示。

· “,n”后缀(n为任意正整数)强制Visual Studio把值视为一个有n个元素的数组。此后缀可以用来展开以指针参考的数组数据。
